/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.taskrouter.v1;

import com.twilio.base.FetcherAsyncCapable;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

public class WorkspaceFetcher extends FetcherAsyncCapable<Workspace> {
    private final String pathSid;

    /**
     * Construct a new WorkspaceFetcher.
     * 
     * @param pathSid The sid
     */
    public WorkspaceFetcher(final String pathSid) {
        this.pathSid = pathSid;
    }

    /**
     * Make the request to the Twilio API to perform the fetch.
     * 
     * @param client TwilioRestClient with which to make the request
     * @return Generated request
     */
    @Override
    protected Request buildRequest(final TwilioRestClient client) {
        return new Request(
                HttpMethod.GET,
                Domains.TASKROUTER.toString(),
                "/v1/Workspaces/" + this.pathSid + "",
                client.getRegion()
        );
    }

    @Override
    protected Workspace parseResponse(final Response response, final TwilioRestClient client) {
        if (response == null) {
            throw new ApiConnectionException("Workspace fetch failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                    restException.getMessage(),
                    restException.getCode(),
                    restException.getMoreInfo(),
                    restException.getStatus(),
                    null
            );
        }

        return Workspace.fromJson(response.getStream(), client.getObjectMapper());
    }


}